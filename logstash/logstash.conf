input { 
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, container, mesos_id, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value_CPU from containerCPU where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containercpu"
        last_run_metadata_path => "/home/containercpu"  
    }
    
    
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, container, mesos_id, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value_NET_IO_Sent from containerNetworkIO_Sent where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containernetworkio_sent"
        last_run_metadata_path => "/home/containernetworkio_sent"  
    }
    
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
        last_run_metadata_path => "/home/containernetworkio_received"  
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, container, mesos_id, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value_NET_IO_Received from containerNetworkIO_Received where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containernetworkio_received"
        last_run_metadata_path => "/home/containernetworkio_received" 
    }
    
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, container, mesos_id, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value_RAM from containerRAM where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containerram"
        last_run_metadata_path => "/home/containerram" 
    }
    
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value from containerDocker where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containerdocker"
        last_run_metadata_path => "/home/containerdocker"
    }
    
    
    jdbc { 
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "*/3 * * * *"
    # our query
        statement => "select hostname, host_ip, SUBSTRING_INDEX(SUBSTRING_INDEX(host_ip, '.', 4), '.', -1) as host_ip_dett, container, mesos_id, SUBSTRING_INDEX(SUBSTRING_INDEX(name, ':', 2), ':', -1) as metrics, from_unixtime(clock) as time, value_Error from containerError where clock>UNIX_TIMESTAMP(:sql_last_value) and clock<UNIX_TIMESTAMP(NOW())"
        tracking_column => time
        tracking_column_type => "timestamp"
        use_column_value => true
        type => "containererror"
        last_run_metadata_path => "/home/containererror"
    }
    
  }
  
    filter {
      mutate {
        convert => {
          "host_ip_dett" => "integer"
           }
      }
      
    }
    
 
  
output {

   if[type] == "containercpu" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containercpu"
            document_id => "%{container} %{metrics} %{time}"
        }
    }
    if[type] == "containernetworkio_sent" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containernetworkio_sent"
            document_id => "%{container} %{metrics} %{time}"
        }
    }
    if[type] == "containernetworkio_received" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containernetworkio_received"
            document_id => "%{container} %{metrics} %{time}"
        }
    }
    if[type] == "containerram" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containerram"
            document_id => "%{container} %{metrics} %{time}"
        }
    }
    if[type] == "containerdocker" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containerdocker"
            document_id => "%{container} %{metrics} %{time}" 
        }
    }
    
    if[type] == "containererror" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "containererror"
            document_id => "%{container} %{metrics} %{time}" 
        }
    }
    
    stdout {
        codec => json_lines
    }
 
}
