input {
    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement_filepath => "/usr/share/logstash/Script-3.sql" 
    }

    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement => "select * from CPU_total_usage_per_second ctups where time > :sql_last_value order by time asc"

    }


    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement => "select * from Memory_maximum_usage mmu where time > :sql_last_value order by time asc"
    }


    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement => "select * from Networks_bytes_received_per_second nbrps where time > :sql_last_value order by time asc"
    }


    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement => "select * from Networks_bytes_sent_per_second nbsps where time > :sql_last_value order by time asc "
    }


    jdbc {
    	jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        schedule => "* * * * *"
        statement => "select * from Error e where time > :sql_last_value order by time asc"
    }
  }


output {

  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "ctups-migrate"
    document_id => "%{container} %{metrics} %{time} %{instance_id}"
    document_type => "ctups"
  }

  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "mmu-migrate"
    document_id => "%{container} %{metrics} %{time} %{instance_id}"
    document_type => "mmu"
  }


  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "nbrps-migrate"
    document_id => "%{container} %{metrics} %{time} %{instance_id}"
    document_type => "nbrps"
  }


  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "nbsps-migrate"
    document_id => "%{container} %{metrics} %{time} %{instance_id}"
    document_type => "nbsps"
  }


  stdout { codec => json_lines }
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "error-migrate"
    document_id => "%{container} %{metrics} %{time} %{instance_id}"
    document_type => "error"
  }

}
